{"version":3,"sources":["components/Text.js","partials/Header.js","App.js","serviceWorker.js","index.js"],"names":["styled","span","_templateObject","Cinzel","_templateObject2","HeaderContainer","div","Header_templateObject","CinzelTitle","Header_templateObject2","HeaderTop","_templateObject3","HeaderBottom","_templateObject4","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","mouseXY","x","y","_throttledMouseMove","_ref","screenX","screenY","console","log","setState","_onMouseMove","e","persist","throttle","bind","assertThisInitialized","react_default","a","createElement","Fragment","onMouseMove","style","transform","concat","React","Component","GlobalStyle","createGlobalStyle","App_templateObject","Boolean","window","location","hostname","match","ReactDOM","render","Header_Header","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8cAEuBA,IAAOC,KAAVC,KAAb,IAKMC,EAASH,IAAOC,KAAVG,shCCHnB,IAAMC,EAAkBL,IAAOM,IAAVC,KASfC,EAAcR,YAAOG,EAAPH,CAAHS,KAOXC,EAAYV,IAAOM,IAAVK,KAeTC,EAAeZ,IAAOM,IAAVO,KAeGC,cAEnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAGRQ,MAAQ,CACNC,QAAS,CAACC,EAAG,EAAGC,EAAG,IALFV,EAQnBW,oBAAsB,SAAAC,GAAgC,IAApBH,EAAoBG,EAA7BC,QAAqBH,EAAQE,EAAjBE,QACnCC,QAAQC,IAAIhB,EAAKO,MAAMC,SACvBR,EAAKiB,SAAS,CAAET,QAAS,CAAEC,IAAGC,QAVbV,EAanBkB,aAAe,SAACC,GACdA,EAAEC,UACFpB,EAAKW,oBAAoBQ,IAbzBnB,EAAKW,oBAAsBU,mBAASrB,EAAKW,oBAAoBW,KAAzBrB,OAAAsB,EAAA,EAAAtB,QAAAsB,EAAA,EAAAtB,CAAAD,KAAqC,IAFxDA,wEAkBV,IACCQ,EAAYL,KAAKI,MAAjBC,QACR,OACEgB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACrC,EAAD,CAAiBuC,YAAazB,KAAKe,cACjCM,EAAAC,EAAAC,cAAChC,EAAD,CAAWmC,MAAO,CAAEC,UAAS,0BAAAC,OAAwC,KAAZvB,EAAQC,EAApC,mBAAAsB,OAA2E,IAAZvB,EAAQE,EAAvE,UAC7Bc,EAAAC,EAAAC,cAAC9B,EAAD,CAAciC,MAAO,CAAEC,UAAS,0BAAAC,OAAwC,IAAZvB,EAAQC,EAApC,mBAAAsB,OAA2E,IAAZvB,EAAQE,EAAvE,UAChCc,EAAAC,EAAAC,cAAClC,EAAD,KAAagC,EAAAC,EAAAC,cAAA,gBAAb,UAAgCF,EAAAC,EAAAC,cAAA,gBAAhC,QAA8DF,EAAAC,EAAAC,cAAA,WAC9DF,EAAAC,EAAAC,cAACvC,EAAD,oCA5B0B6C,IAAMC,qLC9C1C,IAAMC,EAAcC,YAAHC,KCQGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOnB,EAAAC,EAAAC,cFQD,WACb,OACEF,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACQ,EAAD,MACAV,EAAAC,EAAAC,cAACkB,EAAD,QEZU,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.517000c5.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const Raleway = styled.span`\r\n  font-family: 'Raleway', sans-serif;\r\n`\r\n\r\n\r\nexport const Cinzel = styled.span`\r\n  font-family: 'Cinzel Decorative', serif;\r\n`","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { throttle, } from 'lodash'\r\nimport { Cinzel } from '../components/Text';\r\nconst HeaderContainer = styled.div`\r\n  background: #faebe8;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n  width: 100vw;\r\n  position: relative;\r\n  text-align: center;\r\n  padding-top: 100px;\r\n`\r\nconst CinzelTitle = styled(Cinzel)`\r\n  font-size: 3em;\r\n  big {\r\n    font-size: 2em;\r\n  }\r\n`\r\n\r\nconst HeaderTop = styled.div`\r\n  background-image: url(/imgs/bg-1.png);\r\n  background-size: cover;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  position: absolute;\r\n  top: 0;\r\n  background-repeat: no-repeat;\r\n  background-position: 0 0;\r\n  z-index: 1;\r\n  transform: scale(1.2);\r\n  transition: .2s;\r\n\r\n`\r\n\r\nconst HeaderBottom = styled.div`\r\n  background-image: url(/imgs/bg-3.png);\r\n  background-size: cover;\r\n  background-position: 0 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  position: absolute;\r\n  top: 0;\r\n  background-repeat: no-repeat;\r\n  z-index: 0;\r\n  transform: scale(1.15);\r\n  transform-origin: center;\r\n  transition: .1s;\r\n`\r\n\r\nexport default class Header extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this._throttledMouseMove = throttle(this._throttledMouseMove.bind(this), 50);\r\n  }\r\n  state = {\r\n    mouseXY: {x: 0, y: 0}\r\n  }\r\n\r\n  _throttledMouseMove = ({ screenX: x, screenY: y }) => {\r\n    console.log(this.state.mouseXY)\r\n    this.setState({ mouseXY: { x, y } })\r\n  }\r\n\r\n  _onMouseMove = (e) => {\r\n    e.persist();\r\n    this._throttledMouseMove(e);\r\n\r\n  }\r\n  render() {\r\n    const { mouseXY } = this.state\r\n    return (\r\n      <>\r\n        <HeaderContainer onMouseMove={this._onMouseMove}>\r\n          <HeaderTop style={{ transform: `scale(1.15) translateX(${mouseXY.x * 0.015}px) translateY(${mouseXY.y * 0.07}px)` }} />\r\n          <HeaderBottom style={{ transform: `scale(1.15) translateX(${mouseXY.x * 0.010}px) translateY(${mouseXY.y * 0.010}px)` }} />\r\n          <CinzelTitle><big>G</big>ame of <big>C</big>odes</CinzelTitle><br/>\r\n          <Cinzel>The winter is here</Cinzel>\r\n        </HeaderContainer>\r\n      </>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\nimport Header from './partials/Header'\nimport { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    overflow-x: hidden;\n    box-sizing: border-box;\n  }\n` \n\nexport default function App () {\n  return (\n    <>\n      <GlobalStyle />\n      <Header />\n    </>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}